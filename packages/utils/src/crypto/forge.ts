import forge from 'node-forge';
import { ICryptoManager, KeyPairJSON } from './types';
import { BaseCryptoManager } from './base';

export class ForgeCryptoManager extends BaseCryptoManager implements ICryptoManager {
  /**
   * Generates a pair of `JsonWebKey`, both can be used to encrypt and decrypt data.
   * @returns a pair of `JsonWebKey`
   */
  public generateKeyPair = async (): Promise<KeyPairJSON> => {
    const keyPair = await forge.pki.rsa.generateKeyPair({ bits: 1024, workers: 2 });
    const { publicKey, privateKey } = keyPair;
    return {
      publicKey: forge.pki.publicKeyToRSAPublicKeyPem(publicKey),
      privateKey: forge.pki.privateKeyToPem(privateKey),
    };
  };

  /**
   * Provides a way to encrypt data with `cryptoKey`.
   * @param cryptoKey - `JsonWebKey` generated by `generateKeyPair`
   * @param data - data to be encrypted
   * @returns encrypted data
   */
  public encrypt = async (cryptoKey: string, data: string): Promise<string> => {
    const pbKey = forge.pki.publicKeyFromPem(cryptoKey);
    const encrypted = pbKey.encrypt(data, 'RSA-OAEP');
    return forge.util.encode64(encrypted);
  };

  /**
   * Decrypts the encrypted data with `cryptoKey`.
   * @param cryptoKey - `JsonWebKey` generated by `generateKeyPair`
   * @param data - encrypted data
   * @returns decrypted data
   */
  public decrypt = async (cryptoKey: string, data: string): Promise<string> => {
    const priKey = forge.pki.privateKeyFromPem(cryptoKey);

    const decrypted = await priKey.decrypt(forge.util.decode64(data), 'RSA-OAEP');
    return decrypted;
  };
}
